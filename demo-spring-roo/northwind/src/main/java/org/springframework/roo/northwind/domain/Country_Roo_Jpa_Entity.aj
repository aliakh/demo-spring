// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.springframework.roo.northwind.domain;

import io.springlets.format.EntityFormat;
import javax.persistence.Entity;
import javax.persistence.Table;
import org.springframework.roo.northwind.domain.Country;
import org.springframework.roo.northwind.domain.CustomerOrder;
import org.springframework.roo.northwind.domain.Party;
import org.springframework.roo.northwind.domain.Region;
import org.springframework.roo.northwind.domain.Store;
import org.springframework.roo.northwind.domain.Supplier;
import org.springframework.util.Assert;

privileged aspect Country_Roo_Jpa_Entity {
    
    declare @type: Country: @Entity;
    
    declare @type: Country: @Table(name = "NW_COUNTRIES");
    
    declare @type: Country: @EntityFormat;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String Country.ITERABLE_TO_ADD_CANT_BE_NULL_MESSAGE = "The given Iterable of items to add can't be null!";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String Country.ITERABLE_TO_REMOVE_CANT_BE_NULL_MESSAGE = "The given Iterable of items to add can't be null!";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param partiesToAdd
     */
    public void Country.addToParties(Iterable<Party> partiesToAdd) {
        Assert.notNull(partiesToAdd, ITERABLE_TO_ADD_CANT_BE_NULL_MESSAGE);
        for (Party item : partiesToAdd) {
            this.parties.add(item);
            item.setCountry(this);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param partiesToRemove
     */
    public void Country.removeFromParties(Iterable<Party> partiesToRemove) {
        Assert.notNull(partiesToRemove, ITERABLE_TO_REMOVE_CANT_BE_NULL_MESSAGE);
        for (Party item : partiesToRemove) {
            this.parties.remove(item);
            item.setCountry(null);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param regionsToAdd
     */
    public void Country.addToRegions(Iterable<Region> regionsToAdd) {
        Assert.notNull(regionsToAdd, ITERABLE_TO_ADD_CANT_BE_NULL_MESSAGE);
        for (Region item : regionsToAdd) {
            this.regions.add(item);
            item.setCountry(this);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param regionsToRemove
     */
    public void Country.removeFromRegions(Iterable<Region> regionsToRemove) {
        Assert.notNull(regionsToRemove, ITERABLE_TO_REMOVE_CANT_BE_NULL_MESSAGE);
        for (Region item : regionsToRemove) {
            this.regions.remove(item);
            item.setCountry(null);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerOrdersToAdd
     */
    public void Country.addToCustomerOrders(Iterable<CustomerOrder> customerOrdersToAdd) {
        Assert.notNull(customerOrdersToAdd, ITERABLE_TO_ADD_CANT_BE_NULL_MESSAGE);
        for (CustomerOrder item : customerOrdersToAdd) {
            this.customerOrders.add(item);
            item.setCountry(this);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerOrdersToRemove
     */
    public void Country.removeFromCustomerOrders(Iterable<CustomerOrder> customerOrdersToRemove) {
        Assert.notNull(customerOrdersToRemove, ITERABLE_TO_REMOVE_CANT_BE_NULL_MESSAGE);
        for (CustomerOrder item : customerOrdersToRemove) {
            this.customerOrders.remove(item);
            item.setCountry(null);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storesToAdd
     */
    public void Country.addToStores(Iterable<Store> storesToAdd) {
        Assert.notNull(storesToAdd, ITERABLE_TO_ADD_CANT_BE_NULL_MESSAGE);
        for (Store item : storesToAdd) {
            this.stores.add(item);
            item.setCountry(this);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storesToRemove
     */
    public void Country.removeFromStores(Iterable<Store> storesToRemove) {
        Assert.notNull(storesToRemove, ITERABLE_TO_REMOVE_CANT_BE_NULL_MESSAGE);
        for (Store item : storesToRemove) {
            this.stores.remove(item);
            item.setCountry(null);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param suppliersToAdd
     */
    public void Country.addToSuppliers(Iterable<Supplier> suppliersToAdd) {
        Assert.notNull(suppliersToAdd, ITERABLE_TO_ADD_CANT_BE_NULL_MESSAGE);
        for (Supplier item : suppliersToAdd) {
            this.suppliers.add(item);
            item.setCountry(this);
        }
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param suppliersToRemove
     */
    public void Country.removeFromSuppliers(Iterable<Supplier> suppliersToRemove) {
        Assert.notNull(suppliersToRemove, ITERABLE_TO_REMOVE_CANT_BE_NULL_MESSAGE);
        for (Supplier item : suppliersToRemove) {
            this.suppliers.remove(item);
            item.setCountry(null);
        }
    }
    
}
