// Generated by delombok at Tue Jul 30 22:24:37 MSK 2019
/*
 * Copyright 2013-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package example.springdata.jpa.auditing;

import java.time.LocalDateTime;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.domain.Auditable;
import org.springframework.data.jpa.domain.AbstractAuditable;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

/**
 * User domain class that uses auditing functionality of Spring Data that can either be aquired implementing
 * {@link Auditable} or extend {@link AbstractAuditable}.
 *
 * @author Oliver Gierke
 * @author Thomas Darimont
 */
@Entity
@EntityListeners(AuditingEntityListener.class)
public class AuditableUser {
	@Id
	@GeneratedValue
	private Long id;
	private String username;
	@CreatedDate
	private LocalDateTime createdDate;
	@LastModifiedDate
	private LocalDateTime lastModifiedDate;
	@ManyToOne
	@CreatedBy
	private AuditableUser createdBy;
	@ManyToOne
	@LastModifiedBy
	private AuditableUser lastModifiedBy;

	@SuppressWarnings("all")
	public AuditableUser() {
	}

	@SuppressWarnings("all")
	public Long getId() {
		return this.id;
	}

	@SuppressWarnings("all")
	public String getUsername() {
		return this.username;
	}

	@SuppressWarnings("all")
	public LocalDateTime getCreatedDate() {
		return this.createdDate;
	}

	@SuppressWarnings("all")
	public LocalDateTime getLastModifiedDate() {
		return this.lastModifiedDate;
	}

	@SuppressWarnings("all")
	public AuditableUser getCreatedBy() {
		return this.createdBy;
	}

	@SuppressWarnings("all")
	public AuditableUser getLastModifiedBy() {
		return this.lastModifiedBy;
	}

	@SuppressWarnings("all")
	public void setId(final Long id) {
		this.id = id;
	}

	@SuppressWarnings("all")
	public void setUsername(final String username) {
		this.username = username;
	}

	@SuppressWarnings("all")
	public void setCreatedDate(final LocalDateTime createdDate) {
		this.createdDate = createdDate;
	}

	@SuppressWarnings("all")
	public void setLastModifiedDate(final LocalDateTime lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}

	@SuppressWarnings("all")
	public void setCreatedBy(final AuditableUser createdBy) {
		this.createdBy = createdBy;
	}

	@SuppressWarnings("all")
	public void setLastModifiedBy(final AuditableUser lastModifiedBy) {
		this.lastModifiedBy = lastModifiedBy;
	}

	@Override
	@SuppressWarnings("all")
	public boolean equals(final Object o) {
		if (o == this) return true;
		if (!(o instanceof AuditableUser)) return false;
		final AuditableUser other = (AuditableUser) o;
		if (!other.canEqual((Object) this)) return false;
		final Object this$id = this.getId();
		final Object other$id = other.getId();
		if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
		final Object this$username = this.getUsername();
		final Object other$username = other.getUsername();
		if (this$username == null ? other$username != null : !this$username.equals(other$username)) return false;
		final Object this$createdDate = this.getCreatedDate();
		final Object other$createdDate = other.getCreatedDate();
		if (this$createdDate == null ? other$createdDate != null : !this$createdDate.equals(other$createdDate)) return false;
		final Object this$lastModifiedDate = this.getLastModifiedDate();
		final Object other$lastModifiedDate = other.getLastModifiedDate();
		if (this$lastModifiedDate == null ? other$lastModifiedDate != null : !this$lastModifiedDate.equals(other$lastModifiedDate)) return false;
		final Object this$createdBy = this.getCreatedBy();
		final Object other$createdBy = other.getCreatedBy();
		if (this$createdBy == null ? other$createdBy != null : !this$createdBy.equals(other$createdBy)) return false;
		final Object this$lastModifiedBy = this.getLastModifiedBy();
		final Object other$lastModifiedBy = other.getLastModifiedBy();
		if (this$lastModifiedBy == null ? other$lastModifiedBy != null : !this$lastModifiedBy.equals(other$lastModifiedBy)) return false;
		return true;
	}

	@SuppressWarnings("all")
	protected boolean canEqual(final Object other) {
		return other instanceof AuditableUser;
	}

	@Override
	@SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final Object $id = this.getId();
		result = result * PRIME + ($id == null ? 43 : $id.hashCode());
		final Object $username = this.getUsername();
		result = result * PRIME + ($username == null ? 43 : $username.hashCode());
		final Object $createdDate = this.getCreatedDate();
		result = result * PRIME + ($createdDate == null ? 43 : $createdDate.hashCode());
		final Object $lastModifiedDate = this.getLastModifiedDate();
		result = result * PRIME + ($lastModifiedDate == null ? 43 : $lastModifiedDate.hashCode());
		final Object $createdBy = this.getCreatedBy();
		result = result * PRIME + ($createdBy == null ? 43 : $createdBy.hashCode());
		final Object $lastModifiedBy = this.getLastModifiedBy();
		result = result * PRIME + ($lastModifiedBy == null ? 43 : $lastModifiedBy.hashCode());
		return result;
	}

	@Override
	@SuppressWarnings("all")
	public String toString() {
		return "AuditableUser(id=" + this.getId() + ", username=" + this.getUsername() + ", createdDate=" + this.getCreatedDate() + ", lastModifiedDate=" + this.getLastModifiedDate() + ", createdBy=" + this.getCreatedBy() + ", lastModifiedBy=" + this.getLastModifiedBy() + ")";
	}
}
